"use strict";function _classCallCheck(e,r){if(!(e instanceof r))throw new TypeError("Cannot call a class as a function")}var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_createClass=function(){function e(e,r){for(var t=0;t<r.length;t++){var n=r[t];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(r,t,n){return t&&e(r.prototype,t),n&&e(r,n),r}}(),LoginForm=function(){function e(r){_classCallCheck(this,e),this.formCurrent=document.forms[r]}return _createClass(e,[{key:"getData",value:function(){var e={};if(void 0!==this.formCurrent)for(var r=this.formCurrent.elements.length,t=0;t<r;t++){var n=this.formCurrent.elements[t];"INPUT"===n.nodeName.toUpperCase()&&(e[n.name]=$.trim(n.value))}return e}},{key:"setData",value:function(e){var r=["fio","email","phone"];if(void 0!==this.formCurrent&&"object"===(void 0===e?"undefined":_typeof(e))&&!$.isEmptyObject(e)){var t=new Set(r);for(var n in e)e.hasOwnProperty(n)&&t.has(n)&&(this.formCurrent.elements[n].value=e[n])}}},{key:"validate",value:function(){var e=this;if(void 0!==this.formCurrent){var r=function(e,r){$("#"+e.id).addClass("error").after('<span class="pure-form-message-inline text-error">'+r+"</span>"),t=!1,n.push(e.name)},t=!0,n=[];return function(){var r="#"+e.formCurrent.id;$(r).find(".text-error ").remove(),$(r).find(".error").removeClass("error")}(),function(){var t=e.formCurrent.elements.fio;t.value?3===$.trim(t.value).split(" ").length?/^[А-яёЁ ]+$/i.test(t.value)||r(t,"В ФИО допускаются только русские буквы!"):r(t,"ФИО должно быть ровно 3 слова!"):r(t,"Это поле должно быть заполенно!")}(),function(){var t=e.formCurrent.elements.email;t.value?/^([\w\._]+)@(ya.ru|yandex.ru|yandex.ua|yandex.by|yandex.kz|yandex.com)$/i.test(t.value)||r(t,"Email должен быть из домена Яндекса!"):r(t,"Это поле должно быть заполенно!")}(),function(){var t=e.formCurrent.elements.phone;t.value?/^\+7\(\d{3}\)\d{3}-\d{2}-\d{2}$/i.test(t.value)?t.value.match(/\d/g).reduce(function(e,r){return e+ +r},0)>30&&r(t,"Сумма цифр телефона превышает 30"):r(t,"Формат телефона +7(XXX)XXX-XX-XX!"):r(t,"Это поле должно быть заполенно!")}(),{isValid:t,errorFields:n}}}},{key:"submit",value:function(){var e=this,r=function(e,r){$("#resultContainer").removeClass().addClass("alert alert-"+e).text(r).fadeIn(1e3).delay(2e3).fadeOut(1e3)},t=function(e){var t="",n="";switch(e.status){case"success":n="success",t="Данные успешно отправлены!";break;case"error":n="error",t=e.reason;break;case"progress":n="progress",t="Данные обрабатываются. Повтор через "+e.timeout+" секунд!";break;default:n="error",t="Ошибка структуры данных! Обратитесь к системному администратору!"}r(n,t)};if(void 0!==this.formCurrent){var n=7;this.validate().isValid&&($("#submitButton").addClass("pure-button-disabled"),function o(a){var s=["error.json","progress.json","success.json"],i=$("#"+e.formCurrent.id),u=i.attr("action")+s[Math.floor(Math.random()*s.length)];return $.ajax({url:u,type:"get",dataType:"json",data:i.serialize()}).done(function(e){t(e),"progress"===e.status?++a<=n&&setTimeout(function(){return o(a)},1e3*parseInt(e.timeout)):$("#submitButton").removeClass("pure-button-disabled")}).fail(function(){r("error","Ошибка получения данных!"),$("#submitButton").removeClass("pure-button-disabled")})}(1))}}}]),e}();$(function(){$("#resultContainer").hide(),window.MyForm=new LoginForm("form-valid");var e={fio:"Петров Иван Васильевич",email:"petr@ya.ru",phone:"+7(111)222-33-11",qwe:"111"};MyForm.setData(e),$("#submitButton").click(function(e){e.preventDefault(),MyForm.submit()})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
